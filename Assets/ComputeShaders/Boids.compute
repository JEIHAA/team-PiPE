// Boids의 시뮬레이션을 실행하는 ComputeShader

// 커널 함수 지정
// 조향력 계산
#pragma kernel ForceCS
// 속도, 위치 계산
#pragma kernel IntegrateCS


struct BoidData
{
	float3 velocity; // 속도
	float3 position; // 위치
	float3 wall;
};

struct BoidTarget
{
    int ownerID;
    float3 targetPos;
};

// 스레드 그룹 크기
#define SIMULATION_BLOCK_SIZE 256

// Boid 데이터 버퍼 (읽기용)
StructuredBuffer<BoidData>   _BoidDataBufferRead;
// Boid 데이터 버퍼 (읽기, 쓰기용)
RWStructuredBuffer<BoidData> _BoidDataBufferWrite;
// Boid 조향력 버퍼 (읽기용)
StructuredBuffer<float3>     _BoidForceBufferRead;
// Boid 조향력 버퍼 (읽기, 쓰기용)
RWStructuredBuffer<float3>   _BoidForceBufferWrite;
// Boid 위치 타겟 버퍼 (읽기용)
StructuredBuffer<BoidTarget> _BoidTargetBufferRead;
// Boid 위치 타겟 버퍼 (읽기,쓰기용)
RWStructuredBuffer<BoidTarget> _BoidTargetBufferWrite;

int _MaxBoidObjectNum; // Boid 개체 수

float _DeltaTime; // 이전 프레임에서 경과한 시간

float _MaxSpeed;        // 속도 최대 값
float _MaxSteerForce;   // 조향 능력의 최대치

float _SeparateNeighborhoodRadius;  // 회피 거리
float _AlignmentNeighborhoodRadius; // 정렬 거리
float _CohesionNeighborhoodRadius;  // 응집 거리

float _SeparateWeight;  // 분리 가중치
float _AlignmentWeight; // 병렬 가중치
float _CohesionWeight;  // 결합 가중치

float  _AvoidWallWeight; // 경계 반발력

float4 _BoundarySize; // 경계 크기

float4 _StayOwnerRadius; // 주인 플레이어 근처에서 머물 범위
float _BoundOwnerWeight; // 주인 플레이어 근처에 묶여있는 강도 가중치


// 벡터 크기 제한
float3 limit(float3 vec, float max)
{
	float length = sqrt(dot(vec, vec)); // 크기
	return (length > max && length > 0) ? vec.xyz * (max / length) : vec.xyz;
}

// 경계에 닿았을 때 반대 방향의 힘 반환
float3 avoidWall(float3 position, int P_ID)
{
  float3 tp = _BoidTargetBufferRead[P_ID].targetPos.xyz;
  float3 bs = _BoundarySize.xyz;
	float3 acc = float3(0, 0, 0);
	// x
    acc.x = (position.x < tp.x - bs.x * 0.5) ? acc.x + 1.0 : acc.x;
    acc.x = (position.x > tp.x + bs.x * 0.5) ? acc.x - 1.0 : acc.x;
	
	// y
    acc.y = (position.y < tp.y - bs.y * 0.5) ? acc.y + 1.0 : acc.y;
    acc.y = (position.y > tp.y + bs.y * 0.5) ? acc.y - 1.0 : acc.y;
	
	// z
    acc.z = (position.z < tp.z - bs.z * 0.5) ? acc.z + 1.0 : acc.z;
    acc.z = (position.z > tp.z + bs.z * 0.5) ? acc.z - 1.0 : acc.z;

	return acc;
}

// Boid 데이터 저장용 공유 메모리
groupshared BoidData boid_data[SIMULATION_BLOCK_SIZE];

// 조향 능력 계산용 커널 함수
[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void ForceCS
(
	uint3 DTid : SV_DispatchThreadID, 
	uint3 Gid : SV_GroupID,           
	uint3 GTid : SV_GroupThreadID,    
	uint  GI : SV_GroupIndex          
)
{
	const unsigned int P_ID = DTid.x; // 自身のID
	float3 P_position = _BoidDataBufferRead[P_ID].position; // 자신의 위치
	float3 P_velocity = _BoidDataBufferRead[P_ID].velocity; // 자신의 속도
	
  float3 force = float3(0, 0, 0); // 조향력 초기화
    
  float3 cohPosSum = float3(0, 0, 0); // 응집 계산용 위치 누적용 변수
  int cohCount = 0; // 분리할 다른 개체 수
	
  float3 aliVelSum = float3(0, 0, 0); // 정렬 계산용 위치 누적용 변수
  int aliCount = 0; // 분리할 다른 개체 수
	
  float3 sepPosSum = float3(0, 0, 0); // 분리 계산용 위치 누적용 변수
  int sepCount = 0; // 분리할 다른 개체 수

	// (그룹 스레드 수)별 실행(그룹 수 만큼 실행)
	[loop]
	for (uint N_block_ID = 0; N_block_ID < (uint)_MaxBoidObjectNum;
		N_block_ID += SIMULATION_BLOCK_SIZE)
	{
		// SIMULATION_BLOCK_SIZE만큼의 Boid 데이터를 쉐어드 메모리로 로드
		boid_data[GI] = _BoidDataBufferRead[N_block_ID + GI];

		// 그룹 내의 모든 스레드의 작업이 끝날 때까지 그룹 내의 모든 스레드 대기
		GroupMemoryBarrierWithGroupSync();
		
		for (int N_tile_ID = 0; N_tile_ID < SIMULATION_BLOCK_SIZE; N_tile_ID++)
		{
			float3 N_position = boid_data[N_tile_ID].position;
			float3 N_velocity = boid_data[N_tile_ID].velocity;

			float3 diff = P_position - N_position;
			float  dist = sqrt(dot(diff, diff));

			// --- 분리（Separation） ---
			if (dist > 0.0 && dist <= _SeparateNeighborhoodRadius)
			{
				// 이웃 개체 위치에서 this.로 향하는 벡터
				float3 repulse = normalize(P_position - N_position);
				// this.와 이웃 개체의 위치를 거리로 나눈다(거리가 멀면 영향 적음)
				repulse /= dist;
				sepPosSum += repulse;
				sepCount++;
			}

			// --- 정렬（Alignment） ---
			if (dist > 0.0 && dist <= _AlignmentNeighborhoodRadius)
			{
				aliVelSum += N_velocity;
				aliCount++;
			}

			// --- 응집（Cohesion） ---
			if (dist > 0.0 && dist <= _CohesionNeighborhoodRadius)
			{
				cohPosSum += N_position;
        cohCount++;
      }
		}
		GroupMemoryBarrierWithGroupSync();
	}

	// 조향력 (회피)
	float3 sepSteer = (float3)0.0;
	if (sepCount > 0)
	{
		sepSteer = sepPosSum / (float)sepCount;     
		sepSteer = normalize(sepSteer) * _MaxSpeed;
		sepSteer = sepSteer - P_velocity;          
		sepSteer = limit(sepSteer, _MaxSteerForce);
	}

	// 조향력 (정렬)
	float3 aliSteer = (float3)0.0;
	if (aliCount > 0)
	{
		aliSteer = aliVelSum / (float)aliCount;     
		aliSteer = normalize(aliSteer) * _MaxSpeed;
		aliSteer = aliSteer - P_velocity;          
		aliSteer = limit(aliSteer, _MaxSteerForce);
	}
	// 조향력 (응집)
	float3 cohSteer = (float3)0.0;
	if (cohCount > 0)
	{
		cohPosSum = cohPosSum / (float)cohCount;
		cohSteer = cohPosSum - P_position;      
		cohSteer = normalize(cohSteer) * _MaxSpeed; 
		cohSteer = cohSteer - P_velocity;           
		cohSteer = limit(cohSteer, _MaxSteerForce); 
	}
	force += aliSteer * _AlignmentWeight; 
	force += cohSteer * _CohesionWeight;  
	force += sepSteer * _SeparateWeight;  

	_BoidForceBufferWrite[P_ID] = force; 
}

// 속도, 위치 계산을 위한 커널 함수
[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void IntegrateCS
(
	uint3 DTid : SV_DispatchThreadID
)
{
	const unsigned int P_ID = DTid.x;
											           
	BoidData b = _BoidDataBufferWrite[P_ID];   // 현재 Boid 데이터 읽기
	float3 force = _BoidForceBufferRead[P_ID]; // 조향력을 읽기
  float3 maxForce = (float3) 10.0;
	// 벽에 가까워지면 반발하는 힘 부여

	force += avoidWall(b.position, P_ID) * _AvoidWallWeight; 
	
  if (force > maxForce)
  {
    force = 10f;
	}

  b.velocity += force * _DeltaTime; // 조향력을 속도에 적용
	b.velocity = limit(b.velocity, _MaxSpeed); // 속도 제한
	b.position += b.velocity * _DeltaTime;     // 위치 업데이트
											           
	_BoidDataBufferWrite[P_ID] = b;            // 계산결과 쓰기
}